# -*- coding: utf-8 -*-
"""Movie-recommender.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k_VULsqnWsYLmoBupQBRaaY_ohULq_mx
"""

import numpy as np
import pandas as pd

import gspread

movies=pd.read_csv('https://docs.google.com/spreadsheets/d/e/2PACX-1vQ1SF1Vm9dUJvVVMMyANFq8KKZOjc9oIbPCxIQKZs5dCB8XAbwHwQuJx9eVWoM1i-pdPXoUP2P2ubgr/pub?gid=444641845&single=true&output=csv')
credits=pd.read_csv('https://docs.google.com/spreadsheets/d/e/2PACX-1vRCGybg-wnFfdvFuzGepvS2JDt16HgbZMPZa175D6h-zPSUqQsYLgQ8A_HkZESQqiisInJYTFs2LE98/pub?gid=834367730&single=true&output=csv')

movies=movies.merge(credits, on ='title')
movies.info()

##keeping relevant data

movies=movies[['id','title','overview','genres','keywords','cast','crew']]

##preprocessing

movies.isnull().sum()

movies.dropna(inplace=True)

movies.isnull().sum()

movies.duplicated().head

movies.loc[movies.duplicated(),:]

movies=movies.drop_duplicates()

movies.info()

movies.shape

movies.head()

movies.iloc[0,3]

import ast
def convert(obj):
  Lgenre=[]
  for i in ast.literal_eval(obj):
    Lgenre.append(i['name'])
  return Lgenre

movies['genres']=movies['genres'].apply(convert)

movies['keywords']=movies['keywords'].apply(convert)

movies.iloc[0].cast

def convertcast(obj):
  Lcast=[]
  for i in ast.literal_eval(obj):
    counter = 0
    if counter != 3:
      Lcast.append(i['name'])
      counter+=1
    else:
      break
  return Lcast

movies['cast']=movies['cast'].apply(convertcast)

movies.head()

def convertcrew(obj):
  Lcrew=[]
  for i in ast.literal_eval(obj):
    if i['job']=='Director':
      Lcrew.append(i['name'])
      break
  return Lcrew

movies['crew']=movies['crew'].apply(convertcrew)

movies.head()

movies['overview']=movies['overview'].apply(lambda x:x.split())

movies

movies['overview']=movies['overview'].apply(lambda x:[i.replace(" ","") for i in x])
movies['genres']=movies['genres'].apply(lambda x:[i.replace(" ","") for i in x])
movies['cast']=movies['cast'].apply(lambda x:[i.replace(" ","") for i in x])
movies['crew']=movies['crew'].apply(lambda x:[i.replace(" ","") for i in x])

movies

movies['tags']=movies['overview']+movies['genres']+movies['keywords']+movies['cast']+movies['crew']

newmovies=movies[['id','title','tags']]

newmovies

newmovies['tags']=newmovies['tags'].apply(lambda x:" ".join(x))

newmovies['tags']=newmovies['tags'].apply(lambda x:x.lower())

newmovies

##Preprocessing done

##stemming of tags

import nltk

from nltk.stem.porter import PorterStemmer
PS = PorterStemmer()

def stem(text):
  y = []
  for i in text.split():
    y.append(PS.stem(i))
  return " ".join(y)

newmovies['tags'] = newmovies['tags'].apply(stem)

##vectorization of words

from sklearn.feature_extraction.text import CountVectorizer
CV = CountVectorizer(max_features=5000,stop_words='english')

movievectors = CV.fit_transform(newmovies['tags']).toarray()

movievectors

CV.get_feature_names_out()

## findinf simirality between movies and sorting them according to similarity

from sklearn.metrics.pairwise import cosine_similarity as CS

moviesimilarity = CS(movievectors)

def recommend(movie):
  movie_index=newmovies[newmovies['title'] == movie].index[0]
  distances = moviesimilarity[movie_index]
  movie_list=sorted(list(enumerate(distances)),reverse =True, key = lambda x:x[1])[1:6]      ##enumerate is used so that index in not lost in sorting  
  for i in movie_list:
    print(newmovies.iloc[i[0]].title)

## Enter Movie for recommendations

recommend("")